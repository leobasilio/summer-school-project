//uses data.SpeedData

component provides VehicleFlowMeasurer.VehicleFlowMeasurer requires RoadStructureExtractor.RoadStructureExtractor, VehicleDetector.VehicleDetector, VehicleSpeedMeasurer.VehicleSpeedMeasurer, VehicleCounter.VehicleCounter, io.Output out {
	RoadStructureExtractor rs = new RoadStructureExtractor()
	VehicleDetector vd = new VehicleDetector()
	VehicleSpeedMeasurer vsm = new VehicleSpeedMeasurer()
	VehicleCounter vc = new VehicleCounter()	
	
	
	int VehicleFlowMeasurer:measureFlow(Image backgroundImage, Image frames[], ImageMetadata framesMetadata[]) {

		Image roadStructure = rs.extractRoadStructure(backgroundImage)
		Image detectedVehicleImagesForSpeed[] = null
		int index = frames.arrayLength - 1
		for (int i = 4; i >= 0; i--) {
			detectedVehicleImagesForSpeed[i] = vd.detectVehicles(roadStructure, frames[index], framesMetadata[index])
			index--
		}
		
		SpeedData speedData = vsm.measureSpeed(roadStructure, detectedVehicleImagesForSpeed, framesMetadata)
		
		Image detectedVehicleImagesForCounting[] = null
		for (int i = 0; i < frames.arrayLength; i++) {
			detectedVehicleImagesForCounting[i] = vd.detectVehicles(roadStructure, frames[i], framesMetadata[i])
		}
	
		int vehiclesAmount = vc.countVehicles(detectedVehicleImagesForCounting, framesMetadata, speedData)
		return vehiclesAmount
  }
}

