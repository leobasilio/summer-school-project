uses data.String

const char IP[] = "127.0.0.1"
const int PORT 	= 2011

component provides App requires io.Output out, rest.RESys, time.Timer t, data.IntUtil iu, learning.UCB ucb, data.json.JSONParser parser, data.DecUtil du, data.StringUtil su {
	int App:main(AppParam param[]) {
		RESys sys = new RESys(IP, PORT)
		out.println("Setting main...")
		sys.setMain("../application/TCPNetwork.o")
		out.println("Adding proxy...")
		sys.addProxy("|../pal/monitoring/proxies/OrchestratorProxy.o|*(*:orchestrator.Orchestrator[0]:*)|")
		out.println("Starting collection cycle...")

		String configs[] = sys.getAllConfigs()
		String actions[]

		for (int i = 0; i < configs.arrayLength; i++)
			actions = new String[](actions, new String("a" + i))

		ucb.setActions(actions)

		int currentAction

		//for (int count = 0; count < configs.arrayLength; count++) {
		while(true){

			int a = ucb.getAction()

			//out.println("Perception data ($(iu.intToString(a))): $(sys.getPerceptionData())")

			JSONElement perceptionData = parser.parseDocument(sys.getPerceptionData())

			char metricName[] = parser.getValueByDot("metrics[0].name", perceptionData).value

			if(metricName == "response_time"){

				int totalResponseTime = iu.intFromString(parser.getValueByDot("metrics[0].value", perceptionData).value)
				int totalCount = iu.intFromString(parser.getValueByDot("metrics[0].count", perceptionData).value)

				dec averageResponseTime = (0.0 + totalResponseTime) / totalCount
				dec reward = (2000.0 - averageResponseTime)/2000

				out.println("[Reward] $(du.decToString(reward)) (avg time: $(du.decToString(averageResponseTime))ms)")

				ucb.consumeData(reward)

			}

			if(a != currentAction){

				out.println("")
				if(su.find(configs[a].string, "RemoteOrchestrator") != data.StringUtil.NOT_FOUND){
					out.println("Changing to LOCAL processing...")
				}else{
					out.println("Changing to REMOTE processing...")
				}
				out.println("")

				sys.setConfig(configs[a].string)

				currentAction = a

			}

			t.sleep(100)

		}

		out.println("Terminating...")
		sys.terminate()
		out.println("Goodbye!")
		return 0
	}
}
